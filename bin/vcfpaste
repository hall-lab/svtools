#!/usr/bin/env python

import argparse, sys
import math, time, re
from collections import Counter
from argparse import RawTextHelpFormatter

__author__ = "Colby Chiang / Abhijit Badve"
__version__ = "$Revision: 0.0.2 $"
__date__ = "$Date: 2015-10-02 14:31 $"
__revision__ =" Added MSQ field and recalculation for read depth support"

# --------------------------------------
# define functions

def get_args():
    parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description="\
    vcfpaste\n\
    author: " + __author__ + "\n\
    version: " + __version__ + "\n\
    description: Paste VCFs from multiple samples")
    parser.add_argument('-m', '--master', type=argparse.FileType('r'), default=None, help='VCF file to set first 8 columns of variant info [first file in vcf_list]')
    parser.add_argument('vcf_list', metavar='vcf', nargs='*', type=argparse.FileType('r'), default=None, help='VCF file(s) to join')
    
    # parse the arguments
    args = parser.parse_args()

    if len(args.vcf_list) < 1:
        parser.print_help()
        exit(1)
    # send back the user input
    return args
class Vcf(object):
    def __init__(self):
        self.file_format = 'VCFv4.2'
        # self.fasta = fasta
        self.reference = ''
        self.sample_list = []
        self.info_list = []
        self.format_list = []
        self.alt_list = []
        self.add_format('GT', 1, 'String', 'Genotype')

    def add_header(self, header):
        for line in header:
            if line.split('=')[0] == '##fileformat':
                self.file_format = line.rstrip().split('=')[1]
            elif line.split('=')[0] == '##reference':
                self.reference = line.rstrip().split('=')[1]
            elif line.split('=')[0] == '##INFO':
                a = line[line.find('<')+1:line.find('>')]
                r = re.compile(r'(?:[^,\"]|\"[^\"]*\")+')
                self.add_info(*[b.split('=')[1] for b in r.findall(a)])
            elif line.split('=')[0] == '##ALT':
                a = line[line.find('<')+1:line.find('>')]
                r = re.compile(r'(?:[^,\"]|\"[^\"]*\")+')
                self.add_alt(*[b.split('=')[1] for b in r.findall(a)])
            elif line.split('=')[0] == '##FORMAT':
                a = line[line.find('<')+1:line.find('>')]
                r = re.compile(r'(?:[^,\"]|\"[^\"]*\")+')
                self.add_format(*[b.split('=')[1] for b in r.findall(a)])
            # elif line[0] == '#' and line[1] != '#':
            #     self.sample_list = line.rstrip().split('\t')[9:]

    # return the VCF header
    def get_header(self, include_samples=True):
        if include_samples:
            header = '\n'.join(['##fileformat=' + self.file_format,
                                '##fileDate=' + time.strftime('%Y%m%d'),
                                '##reference=' + self.reference] + \
                               [i.hstring for i in self.info_list] + \
                               [a.hstring for a in self.alt_list] + \
                               [f.hstring for f in self.format_list] + \
                               ['\t'.join([
                                   '#CHROM',
                                   'POS',
                                   'ID',
                                   'REF',
                                   'ALT',
                                   'QUAL',
                                   'FILTER',
                                   'INFO',
                                   'FORMAT'] + \
                                          self.sample_list
                                      )])
        else:
            header = '\n'.join(['##fileformat=' + self.file_format,
                                '##fileDate=' + time.strftime('%Y%m%d'),
                                '##reference=' + self.reference] + \
                               [i.hstring for i in self.info_list] + \
                               [a.hstring for a in self.alt_list] + \
                               [f.hstring for f in self.format_list] + \
                               ['\t'.join([
                                   '#CHROM',
                                   'POS',
                                   'ID',
                                   'REF',
                                   'ALT',
                                   'QUAL',
                                   'FILTER',
                                   'INFO']
                                          )])
        return header

    def add_info(self, id, number, type, desc):
        if id not in [i.id for i in self.info_list]:
            inf = self.Info(id, number, type, desc)
            self.info_list.append(inf)

    def remove_info(self, id):
        for i in self.info_list:
            if i.id == id:
                self.info_list.remove(i)
                return

    def add_alt(self, id, desc):
        if id not in [a.id for a in self.alt_list]:
            alt = self.Alt(id, desc)
            self.alt_list.append(alt)

    def add_format(self, id, number, type, desc):
        if id not in [f.id for f in self.format_list]:
            fmt = self.Format(id, number, type, desc)
            self.format_list.append(fmt)

    def add_sample(self, name):
        self.sample_list.append(name)

    # get the VCF column index of a sample
    # NOTE: this is zero-based, like python arrays
    def sample_to_col(self, sample):
        return self.sample_list.index(sample) + 9

    class Info(object):
        def __init__(self, id, number, type, desc):
            self.id = str(id)
            self.number = str(number)
            self.type = str(type)
            self.desc = str(desc)
            # strip the double quotes around the string if present
            if self.desc.startswith('"') and self.desc.endswith('"'):
                self.desc = self.desc[1:-1]
            self.hstring = '##INFO=<ID=' + self.id + ',Number=' + self.number + ',Type=' + self.type + ',Description=\"' + self.desc + '\">'

    class Alt(object):
        def __init__(self, id, desc):
            self.id = str(id)
            self.desc = str(desc)
            # strip the double quotes around the string if present
            if self.desc.startswith('"') and self.desc.endswith('"'):
                self.desc = self.desc[1:-1]
            self.hstring = '##ALT=<ID=' + self.id + ',Description=\"' + self.desc + '\">'

    class Format(object):
        def __init__(self, id, number, type, desc):
            self.id = str(id)
            self.number = str(number)
            self.type = str(type)
            self.desc = str(desc)
            # strip the double quotes around the string if present
            if self.desc.startswith('"') and self.desc.endswith('"'):
                self.desc = self.desc[1:-1]
            self.hstring = '##FORMAT=<ID=' + self.id + ',Number=' + self.number + ',Type=' + self.type + ',Description=\"' + self.desc + '\">'

class Variant(object):
    def __init__(self, var_list, vcf):
        self.chrom = var_list[0]
        self.pos = int(var_list[1])
        self.var_id = var_list[2]
        self.ref = var_list[3]
        self.alt = var_list[4]
        if var_list[5] == '.':
            self.qual = 0
        else:
            self.qual = float(var_list[5])
        self.filter = var_list[6]
        self.sample_list = vcf.sample_list
        self.info_list = vcf.info_list
        self.info = dict()
        self.format_list = vcf.format_list
        # XXX Not sure if we really need this, but may help
        #self.formats = set([i.id for i in self.format_list])
        self.active_formats = set()
        self.gts = dict()
        
        # fill in empty sample genotypes
        if len(var_list) < 8:
            sys.stderr.write('\nError: VCF file must have at least 8 columns\n')
            exit(1)
        if len(var_list) < 9:
            var_list.append("GT")
        # make a genotype for each sample at variant
        for s in self.sample_list:
            try:
                s_gt = var_list[vcf.sample_to_col(s)].split(':')[0]
                self.gts[s] = Genotype(self, s, s_gt)
                # import the existing fmt fields
                for j in zip(var_list[8].split(':'), var_list[vcf.sample_to_col(s)].split(':')):
                    self.gts[s].set_format(j[0], j[1])
            except IndexError:
                self.gts[s] = Genotype(self, s, './.')

        self.info = dict()
        i_split = [a.split('=') for a in var_list[7].split(';')] # temp list of split info column
        for i in i_split:
            if len(i) == 1:
                i.append(True)
            self.info[i[0]] = i[1]

    def set_info(self, field, value):
        if field in [i.id for i in self.info_list]:
            self.info[field] = value
        else:
            sys.stderr.write('\nError: invalid INFO field, \"' + field + '\"\n')
            exit(1)

    def get_info(self, field):
        return self.info[field]

    def get_info_string(self):
        i_list = list()
        for info_field in self.info_list:
            if info_field.id in self.info.keys():
                if info_field.type == 'Flag':
                    i_list.append(info_field.id)
                else:
                    i_list.append('%s=%s' % (info_field.id, self.info[info_field.id]))
        return ';'.join(i_list)

    def get_format_string(self):
        f_list = list()
        for f in self.format_list:
            if f.id in self.active_formats:
                f_list.append(f.id)
        return ':'.join(f_list)

    def genotype(self, sample_name):
        if sample_name in self.sample_list:
            return self.gts[sample_name]
        else:
            sys.stderr.write('\nError: invalid sample name, \"' + sample_name + '\"\n')

    def get_var_string(self):
        s = '\t'.join(map(str,[
            self.chrom,
            self.pos,
            self.var_id,
            self.ref,
            self.alt,
            '%0.2f' % self.qual,
            self.filter,
            self.get_info_string(),
            self.get_format_string(),
            '\t'.join(self.genotype(s).get_gt_string() for s in self.sample_list)
        ]))
        return s

class Genotype(object):
    def __init__(self, variant, sample_name, gt):
        self.format = dict()
        self.variant = variant
        self.set_format('GT', gt)

    def set_format(self, field, value):
        if field in [i.id for i in self.variant.format_list]:
            self.format[field] = value
            if field not in self.variant.active_formats:
                self.variant.active_formats.add(field)
        else:
            sys.stderr.write('\nError: invalid FORMAT field, \"' + field + '\"\n')
            exit(1)

    def get_format(self, field):
        return self.format[field]

    def get_gt_string(self):
        g_list = list()
        for f in self.variant.format_list:
            if f.id in self.variant.active_formats:
                if f.id in self.format:
                    if type(self.format[f.id]) == float:
                        g_list.append('%0.2f' % self.format[f.id])
                    else:
                        g_list.append(self.format[f.id])
                else:
                    g_list.append('.')
        return ':'.join(map(str,g_list))
# primary function
def svt_join(master, vcf_list):
    # if master not provided, set as first VCF
    if master is None:
        master = open(vcf_list[0].name)
    in_header = True
    header = []
    vcf_out = sys.stdout
    master_vcf = Vcf()
    master_vcf.add_info('MSQ', '1', 'Float', 'Mean sample quality of positively genotyped samples')
    master_vcf.remove_info('SNAME')
    vcf_map  = dict()
    for master_line in master:
        if not master_line:
            break
        if in_header:
            if master_line[:2] == '##':
                header.append(master_line)
                continue
            if master_line.startswith('#'):
                for vcf in vcf_list:
                    vcf_obj = Vcf()
                    vcf_header = []
                    vcf_map[vcf] = vcf_obj
                    while 1:    
                        line = vcf.readline()
                        if not line:
                            break
                        if line[:2] == "##":
                            vcf_header.append(line)
                            continue
                        if line[0] == "#":
                            line_v = line.rstrip().split('\t')
                            vcf_header.append(line)
                        for sample in line_v[9:]:
                            master_vcf.sample_list.append(sample)
                            vcf_obj.sample_list.append(sample)
                        vcf_obj.add_header(vcf_header)
                        break
                header.append('\t'.join(master_line.rstrip().split('\t')[:8] + ['FORMAT'] + master_vcf.sample_list))
                master_vcf.add_header(header)
                if len(master_vcf.sample_list) > 0:
                   vcf_out.write(master_vcf.get_header(include_samples=True) + '\n')
                   
                else:
                   vcf_out.write(master_vcf.get_header(include_samples=False) + '\n')
                   
                in_header = False
                continue
        master_v = master_line.rstrip().split('\t')
        master_chrom = master_v[0]
        master_pos = master_v[1]
       
        var_pe = filter(lambda x: x if x.startswith('PE=') else None, master_v[7].split(";"))
        if var_pe is not None:
            var_pe=float(''.join(var_pe).replace('PE=',''))
        var_sr = filter(lambda x: x if x.startswith('SR=') else None, master_v[7].split(";"))
        if var_sr is not None:
            var_sr=float(''.join(var_sr).replace('SR=',''))
        var_su = filter(lambda x: x if x.startswith('SU=') else None, master_v[7].split(";"))
        if var_su is not None:
            var_su=float(''.join(var_su).replace('SU=',''))
        sum_sq = 0.0
        num_pos = 0
        format = None # column 9, VCF format field.

        for vcf in vcf_list:
            variant_line = 1
            line = vcf.readline()
            if not line:
                sys.stderr.write('\nError: VCF files differ in length\n')
            
            line_v = line.rstrip().split('\t')
            var = Variant(line_v,vcf_map[vcf])
            # set FORMAT field as format in first VCF.
            # cannot extract this from master, since it may have
            # been altered in the processing of the VCFs.
            if format is None:
                format = var.get_format_string()
                master_v.append(format)

            # ensure that each VCF position agrees with the master
            if (str(master_chrom) != str(var.chrom) or
                str(master_pos) != str(var.pos)):
                sys.stderr.write('\nError: variant in %s (%s:%s) conflicts with master (%s:%s)\n' %
                (vcf.name, var.chrom, var.pos, master_chrom, master_pos))
                exit(1)

            # ensure that the format for all VCFs agree with the first
            if (format != var.get_format_string()):
                sys.stderr.write('\nError: format in %s (%s) conflicts with first VCF (%s)\n' %
                (vcf.name, var.genotpye, format))
                exit(1)
        
            master_v[5] = str(float(master_v[5]) + float(var.qual))
            var_pe += float(var.get_info("PE"))
            var_sr += float(var.get_info("SR"))
            var_su = float(var_pe) + float(var_sr)
            gt = [var.genotype(s).get_format('GT') for s in var.sample_list]
            positive_gt = filter(lambda x: '1/1' or '0/1' in x, gt)
            num_pos += len(positive_gt)
            try:
                sum_sq += sum([float(var.genotype(s).get_format('SQ')) for s in var.sample_list])
            except ValueError:
                sum_sq += 0
            if num_pos > 0:
                msq = '%0.2f' % (sum_sq / num_pos)
            else:
                msq = '.'
            master_v = master_v + [var.genotype(s).get_gt_string() for s in var.sample_list]
        #write the pasted vcf
        master_var = Variant(master_v,master_vcf)
        master_var.set_info("PE",str(var_pe))
        master_var.set_info("SR",str(var_sr))
        master_var.set_info("SU",str(var_su))
        master_var.set_info("MSQ",str(msq))
        vcf_out.write(master_var.get_var_string() + '\n')
        # close files
    master.close()
    for vcf in vcf_list:
        vcf.close()
    return
# --------------------------------------
# main function

def main():
    # parse the command line args
    args = get_args()

    # call primary function
    svt_join(args.master, args.vcf_list)

# initialize the script
if __name__ == '__main__':
    try:
        sys.exit(main())
    except IOError, e:
        if e.errno != 32:  # ignore SIGPIPE
            raise
